name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      CUDA_VERSION: 12.2 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake wget gnupg unzip

      - name: Install CUDA Toolkit
        run: |
          # Download the cuda-keyring package
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
          # Install the cuda-keyring package
          sudo dpkg -i cuda-keyring_1.0-1_all.deb
          # Update apt repositories
          sudo apt-get update
          # Install the specified CUDA toolkit version
          sudo apt-get -y install cuda-toolkit-${{ env.CUDA_VERSION }}

      - name: Create CUDA Symlink
        run: |
          sudo ln -sfn /usr/local/cuda-${{ env.CUDA_VERSION }} /usr/local/cuda

      - name: Verify CUDA Installation
        run: |
          nvcc --version
          # nvidia-smi is typically not available on GitHub's virtual environments
          # Attempting to run it will fail, so we catch the error
          if ! command -v nvidia-smi &> /dev/null
          then
              echo "nvidia-smi could not be found. GPU access is not available."
          else
              nvidia-smi
          fi

      - name: Install pybind11
        run: |
          sudo apt-get install -y pybind11-dev

      - name: Set CUDA environment variables
        run: |
          echo "CUDA_HOME=/usr/local/cuda" >> $GITHUB_ENV
          echo "/usr/local/cuda/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

      - name: Verify CUDA Headers
        run: |
          ls -la /usr/local/cuda/include/cuda_runtime.h

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install build dependencies
        run: pip install .

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_EXECUTABLE=$(which python) -DCMAKE_PREFIX_PATH=/usr/local/cuda

      - name: Build with CMake
        run: |
          cd build
          cmake --build . --config Release

      - name: Run unit tests
        run: |
          cd build
          python -m unittest discover ../tests

      # (Optional): Cache pip dependencies
      # - name: Cache pip
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
